local a = cpp.program {'main',src='hello',ext='.cxx', static=true}

-- C++11 tests
local b = cpp11.program {'array',src='11-array', static=true}
local cc = cpp11.program {'tuple',src='11-tuple', static=true}


-- STL+ library
local STLPLUS_DIR = 'stlplus3-03-09/'
local stlplus_port_src = STLPLUS_DIR..'portability/*'
local stlplus_port = cpp.library{'portability', src=stlplus_port_src, needs='sockets'}

-- bin2c automation
local bin2c = rule('.lua.h', '.lua', 'lua bin2c.lua $(INPUT) > $(TARGET)')
local d = bin2c 'playground'

local LUAH_TEMPLATE = [[
#include "lua.h"
#include "lauxlib.h"

int luaopen_$(modulename) (lua_State* L) {
	#include "$(input)"
	lua_getglobal(L, "$(modulename)");
	return 1;
}
]]
local lua2h = rule('.c', '.lua.h', function (t)
	local modulename = t.target:match('([^%.]+)%.c')
	print(string.format("creating lua module: %s -> %s", t.deps[1], t.target))
	file.write(t.target, utils.substitute(LUAH_TEMPLATE, {modulename = modulename, input = t.deps[1]}))
end)
local e = lua2h 'playground'

default {playground}